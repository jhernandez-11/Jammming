{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTracks","push","filter","currentTrack","class","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAEIA,E,gGCESC,EAAb,kDACI,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,KAAM,IAGV,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBART,EADvB,0CAWI,WACIE,KAAKN,MAAMO,SAASD,KAAKL,MAAMC,QAZvC,8BAcI,SAAiBM,GACbF,KAAKG,SAAS,CAAEP,KAAMM,EAAME,OAAOC,UAf3C,oBAiBI,WACI,OACA,sBAAKC,UAAU,YAAf,UACI,uBAAOC,SAAUP,KAAKD,iBACtBS,YAAY,mCACZ,wBAAQF,UAAU,eAAeG,QAAST,KAAKH,OAA/C,2BAtBZ,GAA+Ba,IAAMC,WCDxBC,G,kBAAb,kDACI,WAAYlB,GAAQ,IAAD,8BACf,cAAMA,IACDmB,SAAW,EAAKA,SAASf,KAAd,gBAChB,EAAKgB,YAAc,EAAKA,YAAYhB,KAAjB,gBAHJ,EADvB,gDAMI,WACI,OAAIE,KAAKN,MAAMqB,UACJ,wBAAQT,UAAU,eAAeG,QAAST,KAAKc,YAA/C,eAEA,wBAAQR,UAAU,eAAeG,QAAST,KAAKa,SAA/C,iBAVnB,sBAaI,WACIb,KAAKN,MAAMsB,MAAMhB,KAAKN,MAAMuB,SAdpC,yBAgBI,WACIjB,KAAKN,MAAMwB,SAASlB,KAAKN,MAAMuB,SAjBvC,oBAmBI,WACI,OACA,sBAAKX,UAAU,QAAf,UACI,sBAAKA,UAAU,oBAAf,UACI,6BAAKN,KAAKN,MAAMuB,MAAME,OACtB,8BAAInB,KAAKN,MAAMuB,MAAMG,OAArB,MAAgCpB,KAAKN,MAAMuB,MAAMI,YAEpDrB,KAAKsB,sBA1BlB,GAA2BZ,IAAMC,YCCpBY,EAAb,4JACI,WAAU,IAAD,OACL,OACA,qBAAKjB,UAAU,YAAf,SAEQN,KAAKN,MAAM8B,OAAOC,KAAI,SAAAR,GAClB,OAAO,cAAC,EAAD,CAAOA,MAAOA,EACrBD,MAAO,EAAKtB,MAAMsB,MAClBE,SAAU,EAAKxB,MAAMwB,SACrBH,UAAW,EAAKrB,MAAMqB,WAHWE,EAAMS,aAN3D,GAA+BhB,IAAMC,WCAxBgB,EAAb,4JACI,WACI,OACA,sBAAKrB,UAAU,gBAAf,UACI,yCACA,cAAC,EAAD,CAAWkB,OAAQxB,KAAKN,MAAMkC,cAC9BZ,MAAOhB,KAAKN,MAAMsB,MAAOD,WAAW,WANhD,GAAmCL,IAAMC,WCA5BkB,G,MAAb,kDACI,WAAYnC,GAAQ,IAAD,8BACf,cAAMA,IACDoC,iBAAmB,EAAKA,iBAAiBhC,KAAtB,gBAFT,EADvB,oDAKI,SAAiBI,GACbF,KAAKN,MAAMqC,aAAa7B,EAAME,OAAOC,SAN7C,oBASI,WACI,OACA,sBAAKC,UAAU,WAAf,UACI,uBAAO0B,aAAc,eACrBzB,SAAUP,KAAK8B,mBACf,cAAC,EAAD,CAAWN,OAAQxB,KAAKN,MAAMuC,eAC9Bf,SAAUlB,KAAKN,MAAMwB,SACrBH,WAAW,IACX,wBAAQT,UAAU,gBAAgBG,QAAST,KAAKN,MAAMwC,OAAtD,oCAjBZ,GAA8BxB,IAAMC,YLAvBwB,EAAU,CACnBC,eADmB,WAEf,GAAI5C,EACA,OAAOA,EAGX,IAAM6C,EAAmBC,OAAOC,SAASC,KAAKC,MAAM,wBAC9CC,EAAiBJ,OAAOC,SAASC,KAAKC,MAAM,sBAElD,GAAIJ,GAAoBK,EAAgB,CACpClD,EAAc6C,EAAiB,GAC/B,IAAMM,EAAYC,OAAOF,EAAe,IAIxC,OAFAJ,OAAOO,YAAW,kBAAMrD,EAAc,KAAgB,IAAZmD,GAC1CL,OAAOQ,QAAQC,UAAU,eAAgB,KAAM,KACxCvD,EAEP,IAAMwD,EAAS,2DArBV,mCAqBU,0EApBP,kCAqBRV,OAAOC,SAAWS,GAI1BnD,OAtBmB,SAsBZD,GACH,IAAMJ,EAAc2C,EAAQC,iBAC5B,OAAOa,MAAM,kDAAD,OAAmDrD,GAAQ,CACnEsD,QAAS,CACLC,cAAc,UAAD,OAAY3D,MAE9B4D,MAAK,SAAAC,GACJ,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACJ,OAAKA,EAAa/B,OAGX+B,EAAa/B,OAAOgC,MAAM/B,KAAI,SAAAR,GAAK,MAAK,CAC3CS,GAAIT,EAAMS,GACVP,KAAMF,EAAME,KACZC,OAAQH,EAAMwC,QAAQ,GAAGtC,KACzBE,MAAOJ,EAAMI,MAAMF,KACnBuC,IAAKzC,EAAMyC,QAPJ,OAWnBC,aA3CmB,SA2CNxC,EAAMyC,GACf,GAAKzC,GAASyC,EAAUC,OAAxB,CAGA,IAEIC,EAFEtE,EAAc2C,EAAQC,iBACtBc,EAAU,CAAEC,cAAc,UAAD,OAAY3D,IAG3C,OAAOyD,MAAM,gCAAiC,CAAEC,QAASA,IACvDE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAM,SAAAG,GAEJ,OADAO,EAASP,EAAa7B,GACfuB,MAAM,oCAAD,OAAqCa,EAArC,cACZ,CACIZ,QAASA,EACTa,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAE/C,KAAMA,MAC9BiC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAK,SAAAG,GACH,IAAMY,EAAaZ,EAAa7B,GAChC,OAAOuB,MAAM,oCAAD,OAAqCa,EAArC,sBAAyDK,EAAzD,WACZ,CACIjB,QAASA,EACTa,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEE,KAAMR,eMOlCS,E,kDArEb,WAAY3E,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXiC,cAAe,GACf0C,aAAc,cACdrC,eAAgB,IAElB,EAAKpB,SAAW,EAAKA,SAASf,KAAd,gBAChB,EAAKgB,YAAc,EAAKA,YAAYhB,KAAjB,gBACnB,EAAKyE,mBAAqB,EAAKA,mBAAmBzE,KAAxB,gBAC1B,EAAK6D,aAAe,EAAKA,aAAa7D,KAAlB,gBACpB,EAAKD,OAAS,EAAKA,OAAOC,KAAZ,gBAZG,E,4CAcnB,SAASmB,GACP,IAAIO,EAASxB,KAAKL,MAAMsC,eACpBT,EAAOgD,MAAK,SAAAC,GAAW,OACzBA,EAAY/C,KAAOT,EAAMS,QAI3BF,EAAOkD,KAAKzD,GACZjB,KAAKG,SAAS,CAAE8B,eAAgBT,O,yBAElC,SAAYP,GACV,IAAIO,EAASxB,KAAKL,MAAMsC,eACxBT,EAASA,EAAOmD,QAAO,SAAAC,GAAY,OAAIA,EAAalD,KAAOT,EAAMS,MAEjE1B,KAAKG,SAAU,CAAE8B,eAAgBT,M,gCAEnC,SAAmBL,GACjBnB,KAAKG,SAAS,CAAEmE,aAAcnD,M,0BAEhC,WAAgB,IAAD,OACPyC,EAAY5D,KAAKL,MAAMsC,eAAeR,KAAI,SAAAR,GAAK,OAAIA,EAAMyC,OAC/DvB,EAAQwB,aAAa3D,KAAKL,MAAM2E,aAAcV,GAAWR,MAAK,WAC5D,EAAKjD,SAAS,CACZmE,aAAc,eACdrC,eAAgB,U,oBAItB,SAAOrC,GAAO,IAAD,OACXuC,EAAQtC,OAAOD,GAAMwD,MAAK,SAAAxB,GACxB,EAAKzB,SAAS,CAAEyB,cAAeA,S,oBAInC,WACE,OACE,gCACE,oCAAM,sBAAMiD,MAAM,YAAZ,iBAAN,SACA,sBAAKvE,UAAU,MAAf,UACE,cAAC,EAAD,CAAWL,SAAUD,KAAKH,SAC5B,sBAAKS,UAAU,eAAf,UACE,cAAC,EAAD,CAAesB,cAAe5B,KAAKL,MAAMiC,cACzCZ,MAAOhB,KAAKa,WACZ,cAAC,EAAD,CAAUoB,eAAgBjC,KAAKL,MAAMsC,eACrCqC,aAActE,KAAKL,MAAM2E,aACzBpD,SAAUlB,KAAKc,YACfiB,aAAc/B,KAAKuE,mBACnBrC,OAAQlC,KAAK2D,4B,GA9DLjD,IAAMC,WCITmE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.df06e932.chunk.js","sourcesContent":["const clientId = 'd25b6009255843fcb21f37bcc426eafb';\nconst redirectUri = \"http://frequencyNINE.surge.sh/\";\nlet accessToken;\n\nexport const Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        }\n        //checks if access token is matched\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n            //resets parameters from new access token\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n    },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        }).then(response => {\n            return response.json();\n        }).then(jsonResponse => {\n            if (!jsonResponse.tracks) {\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                album: track.album.name,\n                uri: track.uri\n            }));\n        });\n    },\n    savePlaylist(name, trackUris) {\n        if (!name || !trackUris.length) {\n            return;\n        }\n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}`};\n        let userId;\n\n        return fetch('https://api.spotify.com/v1/me', { headers: headers }\n        ).then(response => response.json()\n        ).then( jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, \n            {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ name: name })\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, \n                {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({ uris: trackUris })\n                })\n            })\n        })\n    }\n};","import React from 'react';\nimport './SearchBar.css';\n\n\nexport class SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            term: ''\n        }\n\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n    }\n    search() {\n        this.props.onSearch(this.state.term);\n    }\n    handleTermChange(event) {\n        this.setState({ term: event.target.value });\n    }\n    render() {\n        return (\n        <div className=\"SearchBar\">\n            <input onChange={this.handleTermChange} \n            placeholder=\"Enter A Song, Album, or Artist\" />\n            <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n        </div>\n        )\n    }\n}\n\n","import React from 'react';\nimport './Track.css';\n\nexport class Track extends React.Component {\n    constructor(props) {\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n    renderAction() {\n        if (this.props.isRemoval) {\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n        } else {\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\n        }\n    }\n    addTrack() {\n        this.props.onAdd(this.props.track);\n    }\n    removeTrack() {\n        this.props.onRemove(this.props.track);\n    }\n    render() {\n        return (\n        <div className=\"Track\">\n            <div className=\"Track-information\">\n                <h3>{this.props.track.name}</h3>\n                <p>{this.props.track.artist} | {this.props.track.album}</p>\n            </div>\n            {this.renderAction()}\n        </div>\n        )\n    }\n}","import React from 'react';\nimport './TrackList.css';\nimport { Track } from '../Track/Track.js'\n\nexport class TrackList extends React.Component {\n    render() {\n        return (\n        <div className=\"TrackList\">\n            {\n                this.props.tracks.map(track => {\n                    return <Track track={track} key={track.id}\n                    onAdd={this.props.onAdd}\n                    onRemove={this.props.onRemove}\n                    isRemoval={this.props.isRemoval} />\n                })\n            }\n        </div>\n        )\n    }\n}","import React from 'react';\nimport './SearchResults.css';\nimport { TrackList } from '../TrackList/TrackList.js';\n\nexport class SearchResults extends React.Component {\n    render() {\n        return (\n        <div className=\"SearchResults\">\n            <h2>Results</h2>\n            <TrackList tracks={this.props.searchResults}\n            onAdd={this.props.onAdd} isRemoval={false} />\n        </div>\n        )\n    }\n}","import React from 'react';\nimport './Playlist.css';\nimport { TrackList } from '../TrackList/TrackList.js';\n\nexport class Playlist extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n    handleNameChange(event) {\n        this.props.onNameChange(event.target.value);\n    }\n\n    render() {\n        return (\n        <div className=\"Playlist\">\n            <input defaultValue={\"New Playlist\"}\n            onChange={this.handleNameChange} />\n            <TrackList tracks={this.props.playlistTracks}\n            onRemove={this.props.onRemove}\n            isRemoval={true} />\n            <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n        </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport { SearchBar } from '../SearchBar/SearchBar.js';\nimport { SearchResults } from '../SearchResults/SearchResults.js';\nimport { Playlist } from '../Playlist/Playlist.js';\nimport { Spotify } from '../../util/Spotify.js';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = { \n      searchResults: [],\n      playlistName: 'My Playlist',\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n  addTrack(track) {\n    let tracks = this.state.playlistTracks\n    if (tracks.find(savedTracks => \n      savedTracks.id === track.id\n    )) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({ playlistTracks: tracks });\n  }\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState(({ playlistTracks: tracks }));\n  }\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })\n  }\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults })\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span class=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n        <div className=\"App-playlist\">\n          <SearchResults searchResults={this.state.searchResults}\n          onAdd={this.addTrack} />\n          <Playlist playlistTracks={this.state.playlistTracks}\n          playlistName={this.state.playlistName}\n          onRemove={this.removeTrack}\n          onNameChange={this.updatePlaylistName}\n          onSave={this.savePlaylist} />\n        </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}